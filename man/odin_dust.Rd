% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/odin_dust.R
\name{odin_dust}
\alias{odin_dust}
\alias{odin_dust_}
\title{Create a dust odin model}
\usage{
odin_dust(x, ..., options = NULL)

odin_dust_(x, ..., options = NULL)
}
\arguments{
\item{x}{Either the name of a file to read, a text string (if
length is greater than 1 elements will be joined with newlines)
or an expression.}

\item{...}{Arguments passed to \link{odin_dust_options},
including \code{real_type}, \code{gpu}, \code{verbose}, \code{workdir},
\code{no_check_unused_equations} and \code{rewrite_dims}.}

\item{options}{An \link[odin:odin_options]{odin::odin_options} or \link{odin_dust_options}
object. If given it overrides arguments; if it is already a
\code{odin_dust_options} object it is returned unmodified. Otherwise
it is passed through to \link[odin:odin_options]{odin::odin_options} where it will
override arguments in \code{...} but respond to the \code{odin_dust}
specific options (\code{real_type}, etc)}
}
\description{
Compile an odin model to work with dust.
}
\details{
Note that this does not (yet) support the full odin output object,
instead creating the more limited dust interface. However, for
many uses this should be considerably faster than the interface
that odin normally uses (built on dde).
}
\section{Including custom code}{


When including custom C++ code you may want to set additional
options in order to enable compilation. You can do this by
including pseudo-attributes
\itemize{
\item \verb{// [[odin.dust::cpp_std(C++17)]]} - use this to change the C++
standard used in compilation; this is passed to \code{\link[dust:dust]{dust::dust()}}
as the \code{cpp_std} option. It is only necessary to pass in values
greater than C++11 at present as that is dust's default.
\item \verb{// [[odin.dust::linking_to(pkg)]]} - use this to make include
files present in an R package (e.g., BH) available. You can use
as many of these attributes as you need.
}
}

